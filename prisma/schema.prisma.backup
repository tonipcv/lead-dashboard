datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Lead {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  source    String
  status    String   @default("Base")
  messageSent Boolean  @default(false)
  createdAt DateTime @default(now())
  whatsappMessages WhatsAppMessage[]
}

model WhatsAppMessage {
  id        Int      @id @default(autoincrement())
  messageId String?  @unique
  sender    String
  text      String
  timestamp DateTime @default(now())
  isFromMe  Boolean  @default(false)
  
  leadId    Int?
  lead      Lead?    @relation(fields: [leadId], references: [id])
  
  createdAt DateTime @default(now())
}

model WhatsAppConfig {
  id        Int      @id @default(autoincrement())
  status    String   @default("disconnected")
  qrCode    String?
  updatedAt DateTime @updatedAt
}

model InstagramConfig {
  id          Int      @id @default(autoincrement())
  username    String?
  accessToken String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InstagramComment {
  id          Int      @id @default(autoincrement())
  commentId   String   @unique
  mediaId     String
  text        String
  username    String
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
}

model InstagramMessage {
  id          Int      @id @default(autoincrement())
  messageId   String   @unique
  from        String
  text        String
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
}

model InstagramMention {
  id          Int      @id @default(autoincrement())
  mentionId   String   @unique
  mediaId     String
  username    String
  text        String
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
}

model InstagramStoryInsight {
  id          Int      @id @default(autoincrement())
  storyId     String
  metric      String
  value       Int
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  
  @@unique([storyId, metric])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  subject     String
  text        String?  @db.Text
  html        String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
